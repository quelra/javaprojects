#1.
/* search an unsorted array for a given time.
    -return the 0-based index of the item, if found.
    -return the -1 otherwise.*/
// Best Case Analysis (e.g., item is the first element in array)
int linearSearch(item, array){              //Instruction Count
    int position = -1;                      //1
    int index = 0;                          //1
    while (index < array.length){           //1
        if(array[index] == item) {          //1
            position = index;               //1
            break;                          //1
        }
        index++;                            //0
    }
    return position;                        //1
}                                           //-----
        // total instruction count, T(n): = 7
        // where n is the array size.



#2.
// Worst Case Analysis (e.g., item not in array)
 int linearSearch(item, array){              //Instruction Count
     int position = -1;                      //1
     int index = 0;                          //1
     while (index < array.length){           //n + 1
         if(array[index] == item) {          //n
             position = index;               //0
             break;                          //0
         }
         index++;                            //n
     }
     return position;                        //1
 }                                           //-----
         // total instruction count, T(n): = 3n + 4
         // where n is the array size.

}




#3.

nt linearSearch(item, array) {     //best case instruction count
    int index = 0;                  //1
    while (index < array.length){   //1
        if(array[index] == item) {  //1
            return index;           //1
        }
        index++;                    //0
    }
    return -1;                      //0
}

            // T(n) = 4 where n is the array size

#4.

int linearSearch(item, array) {     //worst case instruction count
    int index = 0;                  //1
    while (index < array.length){   //n + 1
        if(array[index] == item) {  //n
            return index;           //0
        }
        index++;                    //n
    }
    return -1;                      //1
}

            // T(n) =  3n + 3 where n is the array size

#5.

/* Best Case Analysis (e.g., item is in the first array location that is
inspected, i.e., at the middle of the array)*/

int binarySearch(item, sortedArray){            //Instruction Count
    int low = 0;                                //1
    int high = sortedArray.length -1;           //1
    int mid = (low + high) /2;                  //1

    while (low<=high){                          //1
        if(sortedArray[mid] == item) {          //1
            return mid;                         //1
        } else{
            if (sortedArray[mid] < item){       //0
                low = mid + 1;                  //0
            } else {
                high = mid -1;                  //0
            }
        }
        mid = (low + high) / 2;                 //0
    }
    return -1;                                  //0
}
//T(n) = 6


#6.

/* Worst Case Analysis (e.g., item not in array)

int binarySearch(item, sortedArray){            //Instruction Count
    int low = 0;                                //1
    int high = sortedArray.length -1;           //1
    int mid = (low + high) /2;                  //1

    while (low<=high){                          // = log(n) + 1
        if(sortedArray[mid] == item) {          // = log(n)
            return mid;
        } else{
            if (sortedArray[mid] < item){       //
                low = mid + 1;                  //
            } else {                            //  = 2 * log(n)
                high = mid -1;                  //
            }                                   //
        }
        mid = (low + high) / 2;                 // = log(n)
    }
    return -1;                                  //1
}
                                                //T(n) = 5 * log(n) + 5
                                                // where log(n) is the logarithm of n to the base 2


