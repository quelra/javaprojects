<project name="Teamba3.0"  default="main" xmlns:jacoco="antlib:org.jacoco.ant">
  
    <!-- DIRECTORIES -->
    <property name="src.dir"     value="src"/> <!-- Location of source files -->
    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir"     value="${build.dir}/jar"/>
    <property name="docs.dir"    value="docs"/>
    <property name="doc.dir"     value="doc"/>


    <!--JUNIT COMPILE & TEST DIRECTORIES-->
    <property name="junit.file" value="lib/junit/jar/junit.jar"/>
    <property name="hamcrest.file" value="lib/junit/jar/hamcrest-core-1.3.jar"/>
    <property name="build.test.path" location="lib/junit/test"/>
    <property name="test.path" location="src"/>

    <!-- JUNIT REPORTS DIRECTORIES-->
    <property name = "junit-xml-dir" value="lib/junit/junitreports"/>
    <property name = "report-dir" value="lib/junit/html-report" />


    <!--JUNIT - Makes class path for junit-->
    <path id="junit.class.path">
    <pathelement location="${junit.file}"/>
    <pathelement location="${hamcrest.file}"/>
    <pathelement location="${build.test.path}"/>
    </path>

    <target name="main" depends="run"/>

    <!-- CLEAN BUILD -->
    <target name="clean-build">
        <delete dir="${build.dir}"/>
    </target>

   
    <!-- INPUT JAVA FILENAME -->
    <target name="inputJavaFile">
        <input message="Enter java filename without extension (ex. Solutions): "
                addproperty="filename"/>
    </target>
    
    <!-- COMPILE A JAVA FILE -->
    <target name="compile" depends="inputJavaFile" >
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false">
            <exclude name="SolutionsTest.java"/>
        </javac> 
    </target>
     
    <!-- JAR -JAVA -->
    <target name="jar" depends="compile"> <!--  -->
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${filename}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${filename}"/>
            </manifest>
        </jar>
    </target>

     <!-- DOCUMENTATION - JAVA -->
     <target name="createDocumentation" depends="inputJavaFile">   <!-- Create documentation classes used in the project (AARON)-->
        <mkdir dir="${doc.dir}"/>   <!-- Create a directory named doc-->
        <javadoc destdir="${doc.dir}"> 
                <fileset file="${src.dir}/${filename}.java"/> 
        </javadoc>
        <!-- Overwrite existing java documentation -->
        <!-- Note: the directory for the documentation will be created once the java documentation task has been executed -->
    </target>
    
    <!-- JAR - DOC -->
    <target name="jarDoc" depends="createDocumentation">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${filename}doc.jar" basedir="${doc.dir}">
        </jar>
    </target>

    <!-- RUN JAVA -->
    <target name="run" depends="jar">
        <java jar="${jar.dir}/${filename}.jar" fork="true"/>
    </target>


    <!--COMPILE FOR JUNIT-->
    <target name="test-compile">
        <delete dir = "${classes.dir}"/>
        <delete dir = "${build.test.path}"/>
        <mkdir dir="${build.test.path}"/>
        <javac srcdir="${test.path}"
            destdir="${build.test.path}"
            includeantruntime="false">
            <classpath refid="junit.class.path" />
        </javac>
    </target>

    <!-- JUNIT TEST - GENERATE REPORT-->
    <target name="test-junit" depends="test-compile">
        <junit>
        <classpath>
            <path refid="junit.class.path"/>
            <pathelement location="${build.test.path}"/>
        </classpath>
        <batchtest>
            <fileset dir="${build.test.path}">
            <include name="**/*Test*"/>
            </fileset>
        </batchtest>
        
        <formatter type="xml" usefile="true"/>
        </junit>
        <move file="TEST-SolutionsTest.xml" todir="lib/junit/junitreports"/>
    </target>

  
   <!-- JUNIT GENERATE HTML REPORT-->
   <target name = "junit-report">
      <!-- Delete and recreate the html report directories -->
      <delete dir = "${report-dir}" failonerror="false"/>
      <mkdir dir = "${report-dir}" />
      <mkdir dir = "${report-dir}" />
   
      <junitreport todir = "${report-dir}">
         <fileset dir = "${junit-xml-dir}">
            <include name = "**/*.xml" />
         </fileset>
         <report format = "noframes" todir = "${report-dir}" />
      </junitreport>
   </target>
   
   <!-- END OF JUNIT -->


   <!-- JACOCO -->
   <property name="classesB.dir" value="lib/jacoco/classes" /> <!-- EDITTED -->
    <property name="project.name" value="Teamba3.0" />
    
    <!-- Code coverage report generation -->
    <property name="result.dir" value="lib/jacoco/target" />  <!-- EDITTED -->
    <property name="result.report.dir" value="${result.dir}/site/jacoco" />
    <property name="result.exec.file" value="${result.dir}/jacoco.exec" />
    
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="lib/jacoco/jar/jacocoant.jar" /> <!-- EDITTED -->
    </taskdef>

    <!-- Defining the compilation classpath -->
    <path id="classpath">
        <pathelement location="${classesB.dir}" />
        <fileset dir="lib">
            <include name="**/*.jar"/> <!-- EDITTED -->
        </fileset>
    </path>

    <!-- Delete old coverage report -->
    <target name="jacoco-clean">
        <delete dir="${classesB.dir}" />
        <delete dir="${result.dir}" />
    </target>

    <!-- Create target folder -->
    <target name="jacoco-create">
        <mkdir dir="${result.dir}" />
        <mkdir dir="${classesB.dir}" />
    </target>

    <!-- Compile the project -->
    <target name="jacoco-compile" depends="jacoco-clean, jacoco-create">
        <javac srcdir="${src.dir}" destdir="${classesB.dir}" debug="on" deprecation="off" encoding="cp1252" includeantruntime="false">
            <include name="*.java" />
            <classpath refid="classpath" />
        </javac>
    </target>

    <!-- Prepare execution data file -->
    <target name="jacoco-test" depends="jacoco-compile">
        <jacoco:coverage destfile="${result.exec.file}" xmlns:jacoco="antlib:org.jacoco.ant" exclclassloader="sun.reflect.DelegatingClassLoader:javassist.Loader">
            <junit fork="true" forkmode="once" printsummary="on">
                <classpath refid="classpath" />
                <formatter type="xml" />
                <batchtest todir="${result.dir}" fork="yes">
                    <fileset dir="${classesB.dir}">
                        <include name="*Test*" />
                    </fileset>
                </batchtest>
            </junit>
        </jacoco:coverage>
    </target>

    <!-- Generate code coverage reports -->
    <target name="jacoco-report" depends="jacoco-test">
        <jacoco:report>
            <executiondata>
                <file file="${result.exec.file}" />
            </executiondata>
            <structure name="JUnit Code Coverage Report">
                <classfiles>
                    <fileset dir="${classesB.dir}" />
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}" />
                </sourcefiles>
            </structure>
            <html destdir="${result.report.dir}" />
        </jacoco:report>
    </target>

    <!-- Create jar file -->
    <target name="jacoco-jar" depends="jacoco-report">
        <jar jarfile="${result.dir}/build/${project.name}.jar" basedir="${result.dir}">
            
        </jar>
    </target>
</project>